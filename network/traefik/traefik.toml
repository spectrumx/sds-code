# ⚠️ PRODUCTION CONFIG FILE ⚠️
# Saved changes are live immediately

# Traefik configuration file. Sample at:
# https://github.com/traefik/traefik/blob/master/traefik.sample.toml

[global]
    checkNewVersion    = true
    sendAnonymousUsage = false

# https://doc.traefik.io/traefik/operations/dashboard/
[api]
    # e.g. curl --insecure https://localhost/dashboard/
    dashboard = true
    # insecure  = true

[providers.file]
    # this file must be mounted by docker - see the compose file
    filename = "/etc/traefik/traefik.toml"
    watch    = true

[accesslog]
    addInternals = true

    [accesslog.filters]
        minDuration   = "10ms"
        retryAttempts = true
        # statusCodes   = ["200", "300-302"] # switch to this if the one below is too verbose
        statusCodes = ["200", "300-302", "400-404", "500-504"] # dev

[log]
    level = "DEBUG"

[tls]

    [[tls.certificates]]
        certFile = "/etc/traefik/certs/public_key.crt"
        keyFile  = "/etc/traefik/certs/private_key.pem"
        stores   = ["default"]

    [tls.options]

        [tls.options.default]
            minVersion = "VersionTLS12"

[tls.stores]
    # these self-signed certs will be used by default if let's encrypt
    #   fails due to e.g. the domain not being publicly reachable.
    # you might need --insecure flag in curl; and to manually bypass
    #   the browser's security warning if this is the case.
    [tls.stores.default]
        [tls.stores.default.defaultCertificate]
            certFile = "/etc/traefik/certs/public_key.crt"
            keyFile  = "/etc/traefik/certs/private_key.pem"

[entryPoints]

    # https://doc.traefik.io/traefik/routing/entrypoints/

    [entryPoints.web]
        address = ":80"
        [entryPoints.web.http.redirections.entryPoint]
            # redirect all HTTP traffic to HTTPS
            to = "web-secure"

[entryPoints.web-secure]
    address   = ":443"
    asDefault = true
    [entryPoints.web-secure.http2]
        maxConcurrentStreams = 250
    [entryPoints.web-secure.http3]

[certificatesResolvers]
    [certificatesResolvers.letsencrypt]
        [certificatesResolvers.letsencrypt.acme]
            email   = "crcsupport@nd.edu"
            storage = "/etc/traefik/acme/acme.json" # in traefik v3 this file doesn't need to be created manually
            [certificatesResolvers.letsencrypt.acme.httpChallenge]
                entryPoint = "web"

[http.routers]

    # Traefik dashboard will be served, behind authentication, at
    # https://sds-dev.crc.nd.edu/dashboard/
    # (trailing slash is important when accessing it)
    [http.routers.traefik-api]
        middlewares = ["auth"]
        rule        = "Host(`sds-dev.crc.nd.edu`) && ( PathPrefix(`/dashboard/`) )"
        service     = "api@internal"
        [http.routers.traefik-api.tls]
            certResolver = "letsencrypt"

# LOCAL router
[http.routers.sds-gateway-local-app]
    entryPoints = ["web", "web-secure"]
    middlewares = ["csrf"]
    rule        = "Host(`sds-dev.crc.nd.edu`)"
    service     = "sds-gateway-local-app"
[http.routers.sds-gateway-app-local.tls]
    certResolver = "letsencrypt"

# ⚠️ PROD router
[http.routers.sds-gateway-app-prod]
    entryPoints = ["web", "web-secure"]
    middlewares = ["csrf"]
    rule        = "Host(`sds.crc.nd.edu`)"
    service     = "sds-gateway-app"
    [http.routers.sds-gateway-app-prod.tls]
        certResolver = "letsencrypt"

# LOCAL router for static files
[http.routers.sds-gateway-local-nginx]
    entryPoints = ["web", "web-secure"]
    rule        = "Host(`sds-dev.crc.nd.edu`) && PathPrefix(`/static/`)"
    service     = "sds-gateway-local-nginx"
    [http.routers.sds-gateway-local-nginx.tls]
        certResolver = "letsencrypt"

# ⚠️ PROD router for static files
[http.routers.sds-gateway-prod-nginx]
    entryPoints = ["web", "web-secure"]
    rule        = "Host(`sds.crc.nd.edu`) && PathPrefix(`/static/`)"
    service     = "sds-gateway-prod-nginx"
    [http.routers.sds-gateway-prod-nginx.tls]
        certResolver = "letsencrypt"

        # "whoami" service to debug Traefik
        # [http.routers.whoami]
        #     entryPoints = ["web", "web-secure"]
        #     rule    = "Host(`sds-dev.crc.nd.edu`)"
        #     service = "whoami"
        #     [http.routers.whoami.tls]
        #         certResolver = "letsencrypt"

[http.middlewares]

    [http.middlewares.csrf]

        [http.middlewares.csrf.headers]
            hostsProxyHeaders = ["X-CSRFToken"]

[http.middlewares.auth]

    # This is a basic auth for the Traefik dashboard

    [http.middlewares.auth.basicAuth]
        # Generate the credentials file with bcrypt hashes for the users:
        #     $ htpasswd -nB your-user-name >> traefik/credentials.htpasswd
        # Try it out:
        #     $ e.g. curl -u your-user-name:your-password http://your-sds-hostname/dashboard/
        # https://doc.traefik.io/traefik/middlewares/http/basicauth/#usersfile
        usersFile = "/etc/traefik/dashboard/credentials.htpasswd"

[http.services]

    # These must match the compose service name and port

    # LOCAL service
    [[http.services.sds-gateway-local-app.loadBalancer.servers]]
        url = "http://sds-gateway-local-app:8000"

    # ⚠️ PROD service
    [[http.services.sds-gateway-prod-app.loadBalancer.servers]]
        url = "http://sds-gateway-app-prod:18000"

    # LOCAL service
    [[http.services.sds-gateway-local-nginx.loadBalancer.servers]]
        url = "http://sds-gateway-local-nginx:80"

    # ⚠️ PROD service
    [[http.services.sds-gateway-prod-nginx.loadBalancer.servers]]
        url = "http://sds-gateway-prod-nginx:80"

    # Network stack service
    [[http.services.whoami.loadBalancer.servers]]
        url = "http://whoami:2001"
