# ⚠️ PRODUCTION CONFIG FILE ⚠️
# Saved changes are live immediately

# Traefik configuration file. Sample at:
# https://github.com/traefik/traefik/blob/master/traefik.sample.toml

[global]
    checkNewVersion    = true
    sendAnonymousUsage = false

# https://doc.traefik.io/traefik/operations/dashboard/
[api]
    # e.g. curl --insecure https://localhost/dashboard/
    dashboard = true
    # insecure  = true

[providers.file]
    # this file must be mounted by docker - see the compose file
    filename = "/etc/traefik/traefik.toml"
    watch    = true

[accesslog]
    addInternals = true

    [accesslog.filters]
        minDuration   = "10ms"
        retryAttempts = true
        # statusCodes   = ["200", "300-302"] # switch to this if the one below is too verbose
        statusCodes = ["200", "300-302", "400-404", "500-504"] # dev

[log]
    level = "DEBUG"

[tls]

    [[tls.certificates]]
        certFile = "/etc/traefik/certs/public_key.crt"
        keyFile  = "/etc/traefik/certs/private_key.pem"
        stores   = ["default"]

    [tls.options]

        [tls.options.default]
            minVersion = "VersionTLS12"

    [tls.stores]
        # these self-signed certs will be used by default if let's encrypt
        #   fails due to e.g. the domain not being publicly reachable.
        # you might need --insecure flag in curl; and to manually bypass
        #   the browser's security warning if this is the case.
        [tls.stores.default]
            [tls.stores.default.defaultCertificate]
                certFile = "/etc/traefik/certs/public_key.crt"
                keyFile  = "/etc/traefik/certs/private_key.pem"

[entryPoints]

    # https://doc.traefik.io/traefik/routing/entrypoints/

    [entryPoints.web]
        address = ":80"
        [entryPoints.web.http.redirections.entryPoint]
            # redirect all HTTP traffic to HTTPS
            to = "web-secure"

    [entryPoints.web-secure]
        address   = ":443"
        asDefault = true
        [entryPoints.web-secure.http2]
            maxConcurrentStreams = 250
        [entryPoints.web-secure.http3]

[certificatesResolvers]
    [certificatesResolvers.letsencrypt]
        [certificatesResolvers.letsencrypt.acme]
            email   = "crc-sds-list@nd.edu"
            storage = "/etc/traefik/acme/acme.json" # in traefik v3 this file doesn't need to be created manually
            [certificatesResolvers.letsencrypt.acme.httpChallenge]
                entryPoint = "web"

[http.routers]

    # Traefik dashboard will be served, behind authentication, at
    # https://sds-dev.example.com/dashboard/
    # (trailing slash is important when accessing it)
    [http.routers.traefik-api]
        middlewares = ["auth"]
        rule        = "Host(`sds-dev.crc.nd.edu`) && ( PathPrefix(`/dashboard/`) )"
        service     = "api@internal"
        [http.routers.traefik-api.tls]
            certResolver = "letsencrypt"

    # LOCAL routers (names match compose.local.yaml file in gateway/)
    [http.routers.sds-gateway-local-app]
        entryPoints = ["web", "web-secure"]
        middlewares = ["csrf"]
        rule        = "Host(`sds-dev.crc.nd.edu`)"
        service     = "sds-gateway-local-app"
        [http.routers.sds-gateway-local-app.tls]
            certResolver = "letsencrypt"

    # ⚠️ PROD router - SVI endpoints /users/get-svi-api-key/
    # service name matches compose.production.yaml file in gateway/
    [http.routers.sds-gateway-prod-app-secure]
        entryPoints = ["web", "web-secure"]
        middlewares = ["csrf", "whitelist-svi-domains"]
        rule        = "Host(`sds.crc.nd.edu`) && Path(`/users/get-svi-api-key/`)"
        service     = "sds-gateway-prod-app"

        [http.routers.sds-gateway-prod-app-secure.tls]
            certResolver = "letsencrypt"

    # ⚠️ PROD router - public-facing
    # service name matches compose.production.yaml file in gateway/
    [http.routers.sds-gateway-prod-app]
        entryPoints = ["web", "web-secure"]
        middlewares = ["csrf"]
        rule        = "Host(`sds.crc.nd.edu`)"
        service     = "sds-gateway-prod-app"
        [http.routers.sds-gateway-prod-app.tls]
            certResolver = "letsencrypt"

    # LOCAL router for static files
    # service name matches compose.local.yaml file in gateway/
    [http.routers.sds-gateway-local-nginx]
        entryPoints = ["web", "web-secure"]
        rule        = "Host(`sds-dev.crc.nd.edu`) && PathPrefix(`/static/`)"
        service     = "sds-gateway-local-nginx"
        [http.routers.sds-gateway-local-nginx.tls]
            certResolver = "letsencrypt"

    # ⚠️ PROD router for static files
    # service name matches compose.production.yaml file in gateway/
    [http.routers.sds-gateway-prod-nginx]
        entryPoints = ["web", "web-secure"]
        rule        = "Host(`sds.crc.nd.edu`) && PathPrefix(`/static/`)"
        service     = "sds-gateway-prod-nginx"
        [http.routers.sds-gateway-prod-nginx.tls]
            certResolver = "letsencrypt"

            # TIP: if you are debugging Traefik config, it might be useful to enable the
            # 'whoami' service below, which simply prints out the request information it
            # receives. You can then point a router to it and see if the requests are
            # reaching it as expected.

            # The whoami service is defined in network/compose.yaml

            # [http.routers.whoami]
            #     entryPoints = ["web", "web-secure"]
            #     rule    = "Host(`sds-dev.crc.nd.edu`)"
            #     service = "whoami"
            #     [http.routers.whoami.tls]
            #         certResolver = "letsencrypt"

[http.middlewares]

    [http.middlewares.csrf]

        [http.middlewares.csrf.headers]
            hostsProxyHeaders = ["X-CSRFToken"]

    [http.middlewares.whitelist-svi-domains]

        [http.middlewares.whitelist-svi-domains.ipWhiteList]
            sourceRange = [
                "127.0.0.1/32", # localhost
                # these svi variables may be omitted in self-hosted deployments
                "129.74.246.5/32", # svi server
                "10.32.8.29/32",   # svi qa
            ]

    [http.middlewares.auth]

        # This is a basic auth for the Traefik dashboard

        [http.middlewares.auth.basicAuth]
            # Generate the credentials file with bcrypt hashes for the users:
            #     $ htpasswd -nB your-user-name >> traefik/credentials.htpasswd
            # Try it out:
            #     $ e.g. curl -u your-user-name:your-password http://sds.example.com/dashboard/
            # https://doc.traefik.io/traefik/middlewares/http/basicauth/#usersfile
            usersFile = "/etc/traefik/dashboard/credentials.htpasswd"

[http.services]

    # These must match the compose service name and port

    # ------------- WEB APP SERVERS

    # LOCAL service
    # URL matches the service name and port in compose.local.yaml
    [[http.services.sds-gateway-local-app.loadBalancer.servers]]
        url = "http://sds-gateway-local-app:8000"

    # ⚠️ PROD service
    # URL matches the service name and port in compose.production.yaml
    [[http.services.sds-gateway-prod-app.loadBalancer.servers]]
        url = "http://sds-gateway-prod-app:18000"

        # ------------- STATIC SERVERS

    # LOCAL service
    # URL matches the service name and port in compose.local.yaml
    [[http.services.sds-gateway-local-nginx.loadBalancer.servers]]
        url = "http://sds-gateway-local-nginx:80"

    # ⚠️ PROD service
    # URL matches the service name and port in compose.production.yaml
    [[http.services.sds-gateway-prod-nginx.loadBalancer.servers]]
        url = "http://sds-gateway-prod-nginx:80"

        # ------------- NETWORK STACK / DEBUGGING

    # Network stack service
    # The whoami service is defined in network/compose.yaml
    [[http.services.whoami.loadBalancer.servers]]
        url = "http://whoami:2001"
