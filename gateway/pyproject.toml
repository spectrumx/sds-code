[project]
    authors = [{ name = "Center for Research Computing | UND", email = "crcsupport@nd.edu" }]
    dependencies = [
        "argon2-cffi>=23.1.0",
        "blake3>=0.4.1",
        "celery>=5.4.0",
        "crispy-bootstrap5>=2024.10",
        "digital-rf>=2.6.11",
        "django-allauth[socialaccount]>=64.2.1",
        "django-allauth>=65.1",
        "django-celery-beat>=2.7.0",
        "django-cors-headers>=4.5.0",
        "django-crispy-forms>=2.3",
        "django-extensions>=3.2.3",
        "django-model-utils>=5.0.0",
        "django-redis>=5.4.0",
        "django-storages[boto3]>=1.14.4",
        "django-webpack-loader>=3.1.1",
        "django~=4.2",                           # Upgrade from 4.2 LTS -> 5.2 LTS when available
        "djangorestframework-api-key>=3.0.0",
        "djangorestframework>=3.15.2",
        "drf-spectacular>=0.27.2",
        "environs[django]>=14.1.1",
        "factory-boy>=3.3.1",
        "fido2>=1.1.3",
        "flower>=2.0.1",
        "h5py>=3.12.1",
        "hiredis>=3.0.0",
        "loguru>=0.7.2",
        "minio>=7.2.9",
        "numpy>=2.2.5",                          # upgrade to numpy v2 when digital-rf (from PyPI) supports it
        "opensearch-py>=2.7.1",
        "pillow>=11.0.0",
        "pydantic>=2.10.0",
        "python-slugify>=8.0.4",
        "redis>=5.2.0",
        "rich>=13.9.3",
        "sentry-sdk[django]>=2.25.1",
        "uvicorn-worker>=0.2.0",
        "uvicorn>=0.32.0",
        "whitenoise>=6.7.0",
    ]
    description = "Gateway for SpectrumX Data System"
    name = "sds_gateway"
    requires-python = ">=3.12"
    version = "0.1.0"

    [project.optional-dependencies]
        local = [
            "coverage>=7.6",
            "django-coverage-plugin>=3.1.0",
            "django-debug-toolbar>=4.4.6",
            "django-extensions>=3.2.3",
            "django-stubs-ext>=5.1.0",
            "django-types>=0.19.1",
            "djangorestframework-stubs[compatible-mypy]>=3.15.1",
            "djlint>=1.35.2",
            "ipdb>=0.13",
            "mypy>=1.11",
            "pre-commit>=4.0",
            "psycopg[c]>=3.2",
            "pytest-cov>=5.0.0",
            "pytest-django>=4.9.0",
            "pytest-sugar>=1.0",
            "pytest>=8.3",
            "rich>=13.9.3",
            "ruff>=0.7",
            "sphinx-autobuild>=2024.10",
            "sphinx>=8.1",
            "watchfiles>=0.24.0",
            "werkzeug[watchdog]>=3.0.4",
        ]
        production = ["django-anymail[mailgun]>=12.0", "gunicorn>=23.0.0", "psycopg[c]>=3.2.2"]

# ==== TESTING ====
[tool.pytest]

    [tool.pytest.ini_options]
        # pytest
        #   https://docs.pytest.org/en/stable/reference/reference.html#confval-addopts
        # pytest-cov
        #   https://pytest-cov.readthedocs.io/en/latest/config.html
        # more verbose:
        # addopts = "--maxfail=2 --new-first -rf --strict-markers --cov=sds_gateway --cov-report=html --show-capture=stdout -o log_cli=true --showlocals --tb=long --capture=no"
        # less verbose:
        addopts              = "--maxfail=2 --new-first -rf --strict-markers --cov=sds_gateway --cov-report=html --show-capture=stdout -o log_cli=true --tb=short"
        console_output_style = "progress"
        log_auto_indent      = true
        log_cli              = true
        log_cli_level        = "WARN"
        log_date_format      = "%Y-%m-%d %H:%M:%S"
        minversion           = "8.0"
        testpaths            = ["tests"]
        verbosity_test_cases = 2

[tool.coverage]

    [tool.coverage.run]
        # https://coverage.readthedocs.io/en/latest/config.html#run
        branch  = true
        include = ["sds_gateway/**"]
        omit    = ["*/__init__.py", "*/__main__.py", "*/tests/**/*.py", "usage.py", "*/migrations/*"]
        plugins = ["django_coverage_plugin"]

    [tool.coverage.html]
        directory = "tests/coverage"

    [tool.coverage.report]
        exclude_also = [
            "def __repr__",
            "if self.debug:",
            "if settings.DEBUG",
            "raise AssertionError",
            "raise NotImplementedError",
            "if 0:",
            "if __name__ == .__main__.:",
            "if TYPE_CHECKING:",
            "class .*\\bProtocol\\):",
            "@(abc\\.)?abstractmethod",
        ]

# ==== LINTING AND FORMATTING ====
[tool.django-stubs]
    django_settings_module = "config.settings.test"

[tool.djlint]
    blank_line_after_tag = "load,extends"
    close_void_tags      = true
    format_css           = true
    format_js            = true
    # TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
    # https://www.djlint.com/docs/configuration/#ignore
    ignore          = "H006,H030,H031,T002"
    include         = "H017,H035"
    indent          = 4
    max_line_length = 119
    profile         = "django"

    [tool.djlint.css]
        indent_size = 4

    [tool.djlint.js]
        indent_size = 4

[tool.mypy]
    check_untyped_defs     = true
    ignore_missing_imports = true
    plugins                = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]
    python_version         = "3.12"
    warn_redundant_casts   = true
    warn_unused_configs    = true
    warn_unused_ignores    = true

    [[tool.mypy.overrides]]
        # Django migrations should not produce any errors:
        ignore_errors = true
        module        = "*.migrations.*"

[tool.pylint]
    # https://pylint.pycqa.org/en/latest/user_guide/run.html

    [tool.pylint.main]

        # Specify a score threshold under which the program will exit with error.
        fail-under = 10

        # Interpret the stdin as a python script, whose filename needs to be passed as
        # the module_or_package argument.
        # from-stdin =

        # Files or directories to be skipped. They should be base names, not paths.
        ignore = ["CVS"]

        # Add files or directories matching the regular expressions patterns to the
        # ignore-list. The regex matches against paths and can be in Posix or Windows
        # format. Because '\\' represents the directory delimiter on Windows systems, it
        # can't be used as an escape character.
        # ignore-paths =

        # Files or directories matching the regular expression patterns are skipped. The
        # regex matches against base names, not paths. The default value ignores Emacs
        # file locks
        ignore-patterns = ["^\\.#"]

        # List of module names for which member attributes should not be checked and will
        # not be imported (useful for modules/projects where namespaces are manipulated
        # during runtime and thus existing member attributes cannot be deduced by static
        # analysis). It supports qualified module names, as well as Unix pattern
        # matching.
        # ignored-modules =

        # Python code to execute, usually for sys.path manipulation such as
        # pygtk.require().
        # init-hook =

        # Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
        # number of processors available to use, and will cap the count on Windows to
        # avoid hangs.
        jobs = 0

        # When enabled, pylint would attempt to guess common misconfiguration and emit
        # user-friendly hints instead of false-positive error messages.
        suggestion-mode = true

    [tool.pylint.basic]

        # Bad variable names which should always be refused, separated by a comma.
        bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]

        # Good variable names which should always be accepted, separated by a comma.
        good-names = ["i", "j", "k", "ex", "Run", "_"]

    [tool.pylint.design]
        # List of regular expressions of class ancestor names to ignore when counting
        # public methods (see R0903)
        # exclude-too-few-public-methods =

        # List of qualified class names to ignore when counting class parents (see R0901)
        # ignored-parents =

        # Maximum number of arguments for function / method.
        max-args = 7

        # Maximum number of attributes for a class (see R0902).
        max-attributes = 9

        # Maximum number of boolean expressions in an if statement (see R0916).
        max-bool-expr = 5

        # Maximum number of branch for function / method body.
        max-branches = 12

        # Maximum number of locals for function / method body.
        max-locals = 15

        # Maximum number of parents for a class (see R0901).
        max-parents = 7

        # Maximum number of public methods for a class (see R0904).
        max-public-methods = 20

        # Maximum number of return / yield for function / method body.
        max-returns = 6

        # Maximum number of statements in function / method body.
        max-statements = 50

        # Minimum number of public methods for a class (see R0903).
        min-public-methods = 2

    [tool.pylint.exceptions]
        # Exceptions that will emit a warning when caught.
        overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

    [tool.pylint.format]
        # Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
        # expected-line-ending-format =

        # Regexp for a line that is allowed to be longer than the limit.
        ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"

        # Number of spaces of indent required inside a hanging or continued line.
        indent-after-paren = 4

        # String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
        # tab).
        indent-string = "    "

        # Maximum number of characters on a single line.
        max-line-length = 100

        # Maximum number of lines in a module.
        max-module-lines = 1000

        # Allow the body of a class to be on the same line as the declaration if body
        # contains single statement.
        # single-line-class-stmt =

        # Allow the body of an if to be on the same line as the test if there is no else.
        # single-line-if-stmt =

    [tool.pylint.imports]
        # List of modules that can be imported at any level, not just the top level one.
        # allow-any-import-level =

        # Allow explicit reexports by alias from a package __init__.
        # allow-reexport-from-package =

        # Allow wildcard imports from modules that define __all__.
        # allow-wildcard-with-all =

        # Deprecated modules which should not be used, separated by a comma.
        # deprecated-modules =

        # Output a graph (.gv or any supported image format) of external dependencies to
        # the given file (report RP0402 must not be disabled).
        # ext-import-graph =

        # Output a graph (.gv or any supported image format) of all (i.e. internal and
        # external) dependencies to the given file (report RP0402 must not be disabled).
        # import-graph =

        # Output a graph (.gv or any supported image format) of internal dependencies to
        # the given file (report RP0402 must not be disabled).
        # int-import-graph =

        # Force import order to recognize a module as part of the standard compatibility
        # libraries.
        # known-standard-library =

        # Force import order to recognize a module as part of a third party library.
        known-third-party = ["enchant"]

        # Couples of modules and preferred modules, separated by a comma.
        # preferred-modules =

    [tool.pylint.logging]
        # The type of string formatting that logging methods do. `old` means using %
        # formatting, `new` is for `{}` formatting.
        logging-format-style = "old"

        # Logging modules to check that the string format arguments are in logging
        # function parameter format.
        logging-modules = ["logging"]

    [tool.pylint."messages control"]
        # Only show warnings with the listed confidence levels. Leave empty to show all.
        # Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
        confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

        # Disable the message, report, category or checker with the given id(s). You can
        # either give multiple identifiers separated by comma (,) or put this option
        # multiple times (only on the command line, not in the configuration file where
        # it should appear only once). You can also use "--disable=all" to disable
        # everything first and then re-enable specific checks. For example, if you want
        # to run only the similarities checker, you can use "--disable=all
        # --enable=similarities". If you want to run only the classes checker, but have
        # no Warning level messages displayed, use "--disable=all --enable=classes
        # --disable=W".
        disable = [
            "raw-checker-failed",
            "bad-inline-option",
            "locally-disabled",
            "file-ignored",
            "suppressed-message",
            "useless-suppression",
            "deprecated-pragma",
            "use-implicit-booleaness-not-comparison-to-string",
            "use-implicit-booleaness-not-comparison-to-zero",
            "use-symbolic-message-instead",
            "too-few-public-methods",
            "unsubscriptable-object",
            "missing-class-docstring",
            "missing-function-docstring",
        ]

        # Enable the message, report, category or checker with the given id(s). You can
        # either give multiple identifier separated by comma (,) or put this option
        # multiple time (only on the command line, not in the configuration file where it
        # should appear only once). See also the "--disable" option for examples.
        # enable =

    [tool.pylint.method_args]
        # List of qualified names (i.e., library.method) which require a timeout
        # parameter e.g. 'requests.api.get,requests.api.post'
        timeout-methods = [
            "requests.api.delete",
            "requests.api.get",
            "requests.api.head",
            "requests.api.options",
            "requests.api.patch",
            "requests.api.post",
            "requests.api.put",
            "requests.api.request",
        ]

    [tool.pylint.miscellaneous]
        # List of note tags to take in consideration, separated by a comma.
        notes = ["FIXME", "XXX", "TODO"]

        # Regular expression of note tags to take in consideration.
        # notes-rgx =

    [tool.pylint.messages_control]
        # https://pylint.readthedocs.io/en/stable/user_guide/messages/index.html
        disable = [
            "R0903", # too few public methods
            "E1136", # unsubscriptable object (when working with django-types)
            "C0115", # missing class docstring
            "C0116", # missing function or method docstring
        ]

[tool.pyright]
    # https://github.com/microsoft/pyright/blob/main/docs/configuration.md

    ignore           = ["**/.venv/**"]
    include          = [".", "tests", "sds_gateway"]
    pythonPlatform   = "Linux"
    stubPath         = "./typings"                   # defaults to ./typings
    typeCheckingMode = "standard"                    # "off", "basic", "standard", "strict"

    exclude = [
        "*.proto",
        "*.pyc",
        "**/__pycache__",
        "**/.cache/",
        "**/.dvc/",
        "**/.git/",
        "**/.ipynb_checkpoints/",
        "**/.neptune/",
        "**/.ruff_cache/",
        "**/.tox/",
        "**/.trash/",
        "**/.venv/",
        "**/build/",
        "**/cache/",
        "**/data/",
        "**/datalakes/",
        "**/dataset/",
        "**/datasets/",
        "**/dist/",
        "**/node_modules/",
        "**/outputs/",
        "**/previews/",
        "**/temp/",
        "**/tmp/",
        "**/venv/",
    ]

    # Pylint rule list:
    # https://pylint.readthedocs.io/en/stable/user_guide/checkers/features.html
    lint.ignore = [
        # "E501", # line too long
        "R0903", # too few public methods
    ]

    # Reports:
    #   https://github.com/microsoft/pyright/blob/main/docs/configuration.md#type-check-diagnostics-settings
    # "none", "warning", "information", or "error"
    # place ignored rules here
    reportAttributeAccessIssue         = "none"        # too many false positives with Django models
    reportIncompatibleVariableOverride = "none"        # false positives with Meta classes in Django
    reportMissingTypeArgument          = "information"
    reportPrivateUsage                 = "information"

[tool.ruff]
    # Exclude a variety of commonly ignored directories.
    exclude = [
        "__pypackages__",
        "_build",
        ".bzr",
        ".direnv",
        ".eggs",
        ".git-rewrite",
        ".git",
        ".hg",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".pytype",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        "*/migrations/*.py",
        "buck-out",
        "build",
        "dist",
        "docs/",
        "node_modules",
        "staticfiles/*",
        "venv",
    ]
    indent-width = 4
    line-length = 88 # Same as Django: https://github.com/cookiecutter/cookiecutter-django/issues/4792
    # IMPORTANT: in src, use paths from the root of the repository (starting with /)
    src            = ["/gateway/", "/sdk/", "/sdk/src/"]
    target-version = "py312"

    [tool.ruff.lint]
        ignore = [
            # https://docs.astral.sh/ruff/settings/#lint_ignore
            "COM812", # disabled following ruff's recommendation
            "ISC001", # disabled following ruff's recommendation
            "N811",   # Constant imports aliased to non-constant-style names (false positives with django)
            "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
            "S101",   # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
            "S104",   # Possible binding to all interfaces
            "SIM102", # sometimes it's better to nest
            "UP038",  # Checks for uses of isinstance/issubclass that take a tuple
            # of types for comparison.
            # UP038 deactivated because it can make the code slow:
            # https://github.com/astral-sh/ruff/issues/7871
        ]
        select = [
            # RULE SETS: https://docs.astral.sh/ruff/rules/
            "F",     # Pyflakes
            "E",     # Pycodestyle errors
            "W",     # Pycodestyle warnings
            "C90",   # Cyclomatic complexity
            "I",     # Isort (import order)
            "N",     # PEP-8 Naming
            "UP",    # PyUpgrade (modernize code)
            "YTT",   # flake8-2020 (modernize code)
            "ASYNC", # flake8-async
            "S",     # flake8-bandit (security)
            "BLE",   # flake8-blind-except
            "FBT",   # flake8-boolean-trap
            "B",     # flake8-bugbear (common errors)
            "A",     # flake8-builtins
            "COM",   # flake8-commas
            "C4",    # flake8-comprehensions
            "DTZ",   # flake8-date-time-zones
            "T10",   # flake8-debugger
            "DJ",    # flake8-django
            "EM",    # flake8-errmsg
            "EXE",   # flake8-executable
            "FA",    # flake8-flask
            'ISC',   # flake8-implicit-str-concat
            "ICN",   # flake8-import-conventions
            "LOG",   # flake8-logging
            "G",     # flake8-logging-format
            'INP',   # flake8-no-pep-420
            'PIE',   # flake8-pie (misc lints)
            "T20",   # flake8-print
            'PYI',   # flake8-pyi (type hints)
            'PT',    # flake8-pytest-style
            "Q",     # flake8-quotes
            "RSE",   # flake8-raise
            "RET",   # flake8-return
            "SLF",   # flake8-self
            "SLOT",  # flake8-slot
            "SIM",   # flake8-simplify
            "TID",   # flake8-tidy-imports
            "TCH",   # flake8-type-checking
            "INT",   # flake8-gettext
            "PTH",   # flake8-use-pathlib
            "ERA",   # eradicate
            "PD",    # pandas-vet
            "PGH",   # pygrep-hooks
            "PL",    # pylint
            "R",     # refactor
            "TRY",   # tryceratops (try/except)
            "FLY",   # flynt (f-string)
            "PERF",  # perflint (performance)
            "FURB",  # refurb (refactorings for older code)
            "RUF",   # ruff-specific rules
            "AIR",   # airflow
            # "ANN",  # flake8-annotations (type annotations; 100+ errors atm from cookiecutter-django)
            # "ARG",  # unused function argument
            # "DOC",  # docstrings
            # "FAST", # fastapi
            # "NPY",  # numpy-specific (unused)
        ]
        # Allow fix for all enabled rules (when `--fix`) is provided.
        fixable   = ["ALL"]
        unfixable = []
        # The fixes in extend-unsafe-fixes will require
        # provide the `--unsafe-fixes` flag when fixing.
        extend-unsafe-fixes = ["UP038"]
        # Allow unused variables when underscore-prefixed.
        dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

        [tool.ruff.lint.isort]
            force-single-line = true

        [tool.ruff.lint.pylint]
            # Controls PLR0913
            max-args = 9

    [tool.ruff.format]
        indent-style              = "space"
        line-ending               = "auto"
        quote-style               = "double"
        skip-magic-trailing-comma = false
