[project]
    authors = [{ name = "Center for Research Computing | UND", email = "crcsupport@nd.edu" }]
    dependencies = [
        "argon2-cffi>=23.1.0",
        "blake3>=0.4.1",
        "boto3>=1.35.30",
        "celery>=5.4.0",
        "crispy-bootstrap5>=2024.2",
        "django-allauth>=64.2.1",
        "django-celery-beat>=2.7.0",
        "django-cors-headers>=4.4.0",
        "django-crispy-forms>=2.3",
        "django-environ>=0.11.2",
        "django-model-utils>=5.0.0",
        "django-redis>=5.4.0",
        "django-storages>=1.14.4",
        "django-webpack-loader>=3.1.1",
        "django>=4.2,<5",
        "djangorestframework>=3.15.2",
        "drf-spectacular>=0.27.2",
        "flower>=2.0.1",
        "hiredis>=3.0.0",
        "opensearch-py>=2.7.1",
        "pillow>=10.4.0",
        "python-slugify>=8.0.4",
        "redis>=5.0.8",
        "uvicorn>=0.30.6",
        "uvicorn-worker>=0.2.0",
        "whitenoise>=6.7.0",
    ]
    description = "Gateway for SpectrumX Data System"
    name = "sds_gateway"
    requires-python = ">=3.12"
    version = "0.1.0"

    [project.optional-dependencies]
        local = [
            "coverage>=7.6.1",
            "django-stubs[compatible-mypy]>=5.0.4",
            "djangorestframework-stubs[compatible-mypy]>=3.15.1",
            "djlint>=1.35.2",
            "ipdb>=0.13.13",
            "mypy>=1.11.2",
            "pre-commit>=3.8.0",
            "psycopg[c]>=3.2.2",
            "pytest>=8.3.3",
            "pytest-sugar>=1.0.0",
            "ruff>=0.6.6",
            "sphinx>=8.0.2",
            "sphinx-autobuild>=2024.9.19",
            "watchfiles>=0.24.0",
            "werkzeug[watchdog]>=3.0.4",
            "factory-boy>=3.3.1",
            "django-debug-toolbar>=4.4.6",
            "django-extensions>=3.2.3",
            "django-coverage-plugin>=3.1.0",
            "pytest-django>=4.9.0",
        ]
        production = ["django-anymail[mailgun]>=12.0", "gunicorn>=23.0.0", "psycopg[c]>=3.2.2"]

# ==== TESTING ====
[tool.pytest.ini_options]
    addopts      = "--ds=config.settings.test --reuse-db --import-mode=importlib"
    minversion   = "6.0"
    python_files = ["tests.py", "test_*.py"]

[tool.coverage.run]
    include = ["sds_gateway/**"]
    omit    = ["*/migrations/*", "*/tests/*"]
    plugins = ["django_coverage_plugin"]

# ==== LINTING AND FORMATTING ====
[tool.django-stubs]
    django_settings_module = "config.settings.test"

[tool.djlint]
    blank_line_after_tag = "load,extends"
    close_void_tags      = true
    format_css           = true
    format_js            = true
    # TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
    ignore          = "H006,H030,H031,T002"
    include         = "H017,H035"
    indent          = 4
    max_line_length = 119
    profile         = "django"

    [tool.djlint.css]
        indent_size = 4

    [tool.djlint.js]
        indent_size = 4

[tool.mypy]
    check_untyped_defs     = true
    ignore_missing_imports = true
    plugins                = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]
    python_version         = "3.12"
    warn_redundant_casts   = true
    warn_unused_configs    = true
    warn_unused_ignores    = true

    [[tool.mypy.overrides]]
        # Django migrations should not produce any errors:
        ignore_errors = true
        module        = "*.migrations.*"

[tool.ruff]
    # Exclude a variety of commonly ignored directories.
    exclude = [
        ".bzr",
        ".direnv",
        ".eggs",
        ".git",
        ".git-rewrite",
        ".hg",
        ".mypy_cache",
        ".nox",
        ".pants.d",
        ".pytype",
        ".ruff_cache",
        ".svn",
        ".tox",
        ".venv",
        "__pypackages__",
        "_build",
        "buck-out",
        "build",
        "dist",
        "node_modules",
        "venv",
        "*/migrations/*.py",
        "staticfiles/*",
    ]
    # Same as Django: https://github.com/cookiecutter/cookiecutter-django/issues/4792.
    indent-width   = 4
    line-length    = 88
    target-version = "py312"

    [tool.ruff.lint]
        ignore = [
            "S101",   # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
            "S104",   # Possible binding to all interfaces
            "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
            "SIM102", # sometimes it's better to nest
            "UP038",  # Checks for uses of isinstance/issubclass that take a tuple
            # of types for comparison.
            # Deactivated because it can make the code slow:
            # https://github.com/astral-sh/ruff/issues/7871
        ]
        select = [
            # RULE SETS: https://docs.astral.sh/ruff/rules/
            "F",     # Pyflakes
            "E",     # Pycodestyle errors
            "W",     # Pycodestyle warnings
            "C90",   # Cyclomatic complexity
            "I",     # Isort (import order)
            "N",     # PEP-8 Naming
            "UP",    # PyUpgrade (modernize code)
            "YTT",   # flake8-2020 (modernize code)
            "ASYNC", # flake8-async
            "S",     # flake8-bandit (security)
            "BLE",   # flake8-blind-except
            "FBT",   # flake8-boolean-trap
            "B",     # flake8-bugbear (common errors)
            "A",     # flake8-builtins
            "COM",   # flake8-commas
            "C4",    # flake8-comprehensions
            "DTZ",   # flake8-date-time-zones
            "T10",   # flake8-debugger
            "DJ",    # flake8-django
            "EM",    # flake8-errmsg
            "EXE",   # flake8-executable
            "FA",    # flake8-flask
            'ISC',   # flake8-implicit-str-concat
            "ICN",   # flake8-import-conventions
            "LOG",   # flake8-logging
            "G",     # flake8-logging-format
            'INP',   # flake8-no-pep-420
            'PIE',   # flake8-pie (misc lints)
            "T20",   # flake8-print
            'PYI',   # flake8-pyi (type hints)
            'PT',    # flake8-pytest-style
            "Q",     # flake8-quotes
            "RSE",   # flake8-raise
            "RET",   # flake8-return
            "SLF",   # flake8-self
            "SLOT",  # flake8-slot
            "SIM",   # flake8-simplify
            "TID",   # flake8-tidy-imports
            "TCH",   # flake8-type-checking
            "INT",   # flake8-gettext
            "PTH",   # flake8-use-pathlib
            "ERA",   # eradicate
            "PD",    # pandas-vet
            "PGH",   # pygrep-hooks
            "PL",    # pylint
            "R",     # refactor
            "TRY",   # tryceratops (try/except)
            "FLY",   # flynt (f-string)
            "PERF",  # perflint (performance)
            "FURB",  # refurb (refactorings for older code)
            "RUF",   # ruff-specific rules
            "AIR",   # airflow
            # "ANN",  # flake8-annotations (type annotations; 100+ errors atm from cookiecutter-django)
            # "ARG",  # unused function argument
            # "DOC",  # docstrings
            # "FAST", # fastapi
            # "NPY",  # numpy-specific (unused)
        ]
        # Allow fix for all enabled rules (when `--fix`) is provided.
        fixable   = ["ALL"]
        unfixable = []
        # The fixes in extend-unsafe-fixes will require
        # provide the `--unsafe-fixes` flag when fixing.
        extend-unsafe-fixes = ["UP038"]
        # Allow unused variables when underscore-prefixed.
        dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

    [tool.ruff.format]
        indent-style              = "space"
        line-ending               = "auto"
        quote-style               = "double"
        skip-magic-trailing-comma = false

    [tool.ruff.lint.isort]
        force-single-line = true
