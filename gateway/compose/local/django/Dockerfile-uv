# define an alias for the specific python version used in this file.
FROM docker.io/python:3.12-slim-bookworm AS python

# install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Python build stage
FROM python AS python-build-stage

ARG BUILD_ENVIRONMENT=local
ARG APP_HOME=/app

# Install apt packages
RUN apt-get update && apt-get install --no-install-recommends -y \
    # dependencies for building Python packages
    build-essential \
    # psycopg dependencies gcc, libpq-dev
    libpq-dev \
    # digital_rf dependencies
    pkg-config \
    libhdf5-dev \
    # hdf5 deps for digital-rf
    libhdf5-dev python3-dev hdf5-tools python3-h5py \
    # curl for installing Rust
    curl

# Install Rust and Cargo
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && \
    . $HOME/.cargo/env && \
    echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $HOME/.bashrc

# Ensure Rust and Cargo are available in the PATH
ENV PATH="/root/.cargo/bin:${PATH}"

# Python 'run' stage
FROM python AS python-run-stage

ARG BUILD_ENVIRONMENT=local
ARG APP_HOME=/app

ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV BUILD_ENV=${BUILD_ENVIRONMENT}

WORKDIR ${APP_HOME}

# devcontainer dependencies and utils
RUN apt-get update && apt-get install --no-install-recommends -y \
    sudo git bash-completion nano ssh

# Create devcontainer user and add it to sudoers
RUN groupadd --gid 1000 dev-user \
    && useradd --uid 1000 --gid dev-user --shell /bin/bash --create-home dev-user \
    && echo dev-user ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/dev-user \
    && chmod 0440 /etc/sudoers.d/dev-user

# Install required system dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    # psycopg build
    build-essential \
    # psycopg dependencies
    libpq-dev \
    # translations dependencies
    gettext \
    # hdf5 deps for digital-rf
    libhdf5-dev python3-dev hdf5-tools python3-h5py

# cleaning up unused files
# && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
# && rm -rf /var/lib/apt/lists/*

# install project dependencies
COPY ./pyproject.toml ./uv.lock ${APP_HOME}/
RUN uv sync --frozen --extra ${BUILD_ENVIRONMENT}

COPY ./compose/production/django/entrypoint /entrypoint
RUN sed -i 's/\r$//g' /entrypoint
RUN chmod +x /entrypoint

COPY ./compose/local/django/start /start
RUN sed -i 's/\r$//g' /start
RUN chmod +x /start

COPY ./compose/local/django/celery/worker/start /start-celeryworker
RUN sed -i 's/\r$//g' /start-celeryworker
RUN chmod +x /start-celeryworker

COPY ./compose/local/django/celery/beat/start /start-celerybeat
RUN sed -i 's/\r$//g' /start-celerybeat
RUN chmod +x /start-celerybeat

COPY ./compose/local/django/celery/flower/start /start-flower
RUN sed -i 's/\r$//g' /start-flower
RUN chmod +x /start-flower

# copy application code to WORKDIR
COPY . ${APP_HOME}

ENTRYPOINT ["/entrypoint"]
