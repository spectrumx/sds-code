# ⚠️ PRODUCTION COMPOSE FILE ⚠️
# Make sure images, container names, and other assets start with "sds-gateway-prod-"
#   to underline its importance and avoid accidents.
# Also try to keep it as close to the production
#   file as possible to simplify the deployment process.

volumes:
    # for safety, all gateway production volumes start with "sds-gateway-prod-"
    sds-gateway-prod-app-media: {}
    sds-gateway-prod-temp-zips: {} # for temporary zip files
    sds-gateway-prod-uv-cache: {} # Python virtual environment
    sds-gateway-prod-uv-venv-app: {}
    sds-gateway-prod-uv-venv-worker: {}
    sds-gateway-prod-uv-venv-beat: {}
    sds-gateway-prod-uv-venv-flower: {}
    sds-gateway-prod-minio-files: {}
    sds-gateway-prod-opensearch-data: {}
    sds-gateway-prod-postgres-data-backups: {}
    sds-gateway-prod-postgres-data: {}
    sds-gateway-prod-redis-data: {}
    sds-gateway-prod-static: {}

networks:
    # for safety, all gateway production networks start with "sds-gateway-prod-"
    sds-gateway-prod-minio-net:
        driver: bridge
    sds-gateway-prod-opensearch-net:
        driver: bridge
    sds-network-prod:
        external: true

services:
    sds-gateway-prod-app:
        build:
            context: .
            dockerfile: ./compose/production/django/Dockerfile
        image: sds-gateway-prod-app
        container_name: sds-gateway-prod-app
        tty: true
        depends_on:
            opensearch:
                condition: service_healthy
            postgres:
                condition: service_started
            redis:
                condition: service_started
            minio:
                condition: service_started
        volumes:
            - source: sds-gateway-prod-app-media
              target: /app/sds_gateway/media
              type: volume
              read_only: false
            - source: sds-gateway-prod-temp-zips
              target: /app/sds_gateway/media/temp_zips
              type: volume
              read_only: false
            - source: sds-gateway-prod-static
              target: /app/staticfiles/
              type: volume
              read_only: false
            - source: ./opensearch/data/certs-django
              target: /app/opensearch/data/certs
              type: bind
              read_only: true
              bind:
                  selinux: z
            - source: sds-gateway-prod-uv-cache
              target: /opt/uv-cache/
              type: volume
              read_only: false
            - source: sds-gateway-prod-uv-venv-app
              target: /opt/uv-venv/
              type: volume
              read_only: false
        post_start:
            - command: chown -R django:django /app/sds_gateway/media/ /opt/uv-cache/ /opt/uv-venv/
              user: root
        env_file:
            - ./.envs/production/django.env
            - ./.envs/production/minio.env
            - ./.envs/production/postgres.env
            - ./.envs/production/opensearch.env
        ports:
            - "18000:18000" # make sure this port matches traefik's config, if used
        # remember /entrypoint runs first
        command: "/start"
        networks:
            - sds-gateway-prod-opensearch-net
            - sds-gateway-prod-minio-net
            - sds-network-prod
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:18000/ || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 5

    nginx:
        # nginx serves the static files generated for the gateway
        image: docker.io/nginx:1-alpine
        container_name: sds-gateway-prod-nginx
        volumes:
            - source: ./compose/production/nginx/nginx-default.conf
              target: /etc/nginx/conf.d/default.conf
              type: bind
              read_only: true
              bind:
                  selinux: z
            # e.g. curl --insecure https://sds.crc.nd.edu/static/css/project.css
            # - This path in app is: /app/staticfiles/ mounted as a managed volume
            - source: sds-gateway-prod-static
              target: /usr/share/nginx/static/
              type: volume
              read_only: true
        networks:
            - sds-network-prod

    minio:
        # main file storage for sds
        # minio uses rolling upgrades that are non-disruptive, so we can target latest
        # For more information on how to upgrade MinIO deployment, refer to the MinIO documentation:
        # https://min.io/docs/minio/container/operations/install-deploy-manage/upgrade-minio-deployment.html
        image: minio/minio:latest
        container_name: sds-gateway-prod-minio
        volumes:
            - sds-gateway-prod-minio-files:/files
        ports:
            - "19000:9000"
            - "19001:9001"
        env_file:
            - ./.envs/production/minio.env
        command: 'server /files --console-address ":9001"'
        networks:
            - sds-gateway-prod-minio-net

    opensearch:
        # used for indexing and searching documents
        build:
            context: .
            dockerfile: ./compose/production/opensearch/Dockerfile
            args:
                UID: ${UID}
                GID: ${GID}
        container_name: sds-gateway-prod-opensearch
        volumes:
            - source: sds-gateway-prod-opensearch-data
              target: /usr/share/opensearch/data
              type: volume
              read_only: false
            - source: ./compose/production/opensearch/opensearch.yaml
              target: /usr/share/opensearch/config/opensearch.yml
              type: bind
              read_only: true
              bind:
                  selinux: z
            - source: ./opensearch/data/certs
              target: /usr/share/opensearch/config/certs
              type: bind
              read_only: true
              bind:
                  selinux: z
            - source: ./opensearch/data/snapshots
              target: /mnt/snapshots
              type: bind
              read_only: false
              bind:
                  selinux: z
        env_file:
            - ./.envs/production/opensearch.env
        ulimits:
            memlock:
                soft: -1
                hard: -1
        ports:
            - "19200:9200"
            - "19600:9600"
        networks:
            - sds-gateway-prod-opensearch-net
        tty: true
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    'curl -k -u "$OPENSEARCH_ADMIN_USER:$OPENSEARCH_INITIAL_ADMIN_PASSWORD" https://localhost:9200/_cluster/health || exit 1',
                ]
            interval: 5s
            timeout: 5s
            retries: 10

    postgres:
        # main database for the gateway app
        build:
            context: .
            dockerfile: ./compose/production/postgres/Dockerfile
        image: sds-gateway-prod-postgres
        container_name: sds-gateway-prod-postgres
        command: "-c 'max_connections=300'"
        volumes:
            - sds-gateway-prod-postgres-data:/var/lib/postgresql/data
            - sds-gateway-prod-postgres-data-backups:/backups
        env_file:
            - ./.envs/production/postgres.env
        networks:
            - sds-gateway-prod-minio-net

    redis:
        # used as caching layer for the gateway app
        image: docker.io/redis:6
        container_name: sds-gateway-prod-redis
        volumes:
            - sds-gateway-prod-redis-data:/data
        networks:
            - sds-network-prod

    # ===================
    # Celery services for background tasks
    celery-worker:
        build:
            context: .
            dockerfile: ./compose/production/django/Dockerfile
        image: sds-gateway-prod-app
        container_name: sds-gateway-prod-celery-worker
        tty: true
        depends_on:
            sds-gateway-prod-app:
                condition: service_started
        volumes:
            - source: sds-gateway-prod-uv-cache
              target: /opt/uv-cache/
              type: volume
              read_only: false
            - source: sds-gateway-prod-app-media
              target: /app/sds_gateway/media
              type: volume
              read_only: false
            - source: sds-gateway-prod-temp-zips
              target: /app/sds_gateway/media/temp_zips
              type: volume
              read_only: false
            - source: ./opensearch/data/certs-django
              target: /app/opensearch/data/certs
              type: bind
              read_only: true
              bind:
                  selinux: z
            - source: sds-gateway-prod-uv-venv-worker
              target: /opt/uv-venv/
              type: volume
              read_only: false
        post_start:
            - command: chown -R django:django /app/sds_gateway/media/ /opt/uv-cache/ /opt/uv-venv/
              user: root
        env_file:
            - ./.envs/production/django.env
            - ./.envs/production/minio.env
            - ./.envs/production/postgres.env
            - ./.envs/production/opensearch.env
        command: "/worker-start"
        networks:
            - sds-gateway-prod-opensearch-net
            - sds-gateway-prod-minio-net
            - sds-network-prod

    celery-beat:
        # Celery Beat scheduler for periodic tasks
        build:
            context: .
            dockerfile: ./compose/production/django/Dockerfile
        image: sds-gateway-prod-app
        container_name: sds-gateway-prod-celery-beat
        depends_on:
            sds-gateway-prod-app:
                condition: service_started
        volumes:
            - source: sds-gateway-prod-uv-cache
              target: /opt/uv-cache/
              type: volume
              read_only: false
            - source: sds-gateway-prod-app-media
              target: /app/sds_gateway/media
              type: volume
              read_only: false
            - source: sds-gateway-prod-temp-zips
              target: /app/sds_gateway/media/temp_zips
              type: volume
              read_only: false
            - source: ./opensearch/data/certs-django
              target: /app/opensearch/data/certs
              type: bind
              read_only: true
              bind:
                  selinux: z
            - source: sds-gateway-prod-uv-venv-beat
              target: /opt/uv-venv/
              type: volume
              read_only: false
        post_start:
            - command: chown -R django:django /app/sds_gateway/media/ /opt/uv-cache/ /opt/uv-venv/
              user: root
        env_file:
            - ./.envs/production/django.env
            - ./.envs/production/minio.env
            - ./.envs/production/postgres.env
            - ./.envs/production/opensearch.env
        command: "/beat-start"
        networks:
            - sds-gateway-prod-opensearch-net
            - sds-gateway-prod-minio-net
            - sds-network-prod

    celery-flower:
        # Celery monitoring and administration tool
        build:
            context: .
            dockerfile: ./compose/production/django/Dockerfile
        image: sds-gateway-prod-app
        container_name: sds-gateway-prod-celery-flower
        tty: true
        depends_on:
            sds-gateway-prod-app:
                condition: service_started
        volumes:
            - source: sds-gateway-prod-uv-cache
              target: /opt/uv-cache/
              type: volume
              read_only: false
            - source: sds-gateway-prod-app-media
              target: /app/sds_gateway/media
              type: volume
              read_only: false
            - source: sds-gateway-prod-temp-zips
              target: /app/sds_gateway/media/temp_zips
              type: volume
              read_only: false
            - source: sds-gateway-prod-uv-venv-flower
              target: /opt/uv-venv/
              type: volume
              read_only: false
        post_start:
            - command: chown -R django:django /app/sds_gateway/media/ /opt/uv-cache/ /opt/uv-venv/
              user: root
        env_file:
            - ./.envs/production/django.env
            - ./.envs/production/minio.env
            - ./.envs/production/postgres.env
            - ./.envs/production/opensearch.env
        command: "/flower-start"
        ports:
            - "15555:5555" # Flower web interface
        networks:
            - sds-gateway-prod-minio-net
            - sds-gateway-prod-opensearch-net
            - sds-network-prod
